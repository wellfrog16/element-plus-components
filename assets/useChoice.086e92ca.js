import{g as y,z as r,E as p,ao as f}from"./app.996e40ef.js";const g={name:{type:String,default:""},multiple:{type:Boolean,default:!1},modelValue:{type:[String,Number,Boolean,Array],default:"",required:!0},options:{type:[Array,Function],default:()=>[]},props:{type:Object,default:()=>{}},expires:{type:[Date,Number],default:60*60*2},loadingText:{type:String,default:"\u52A0\u8F7D\u4E2D"}},b=["update:modelValue","init"],A=({props:e,emits:u},c)=>{const l=y(!1),n=y(),d=r({get:()=>l.value?e.loadingText:e.modelValue,set:t=>u("update:modelValue",t)}),o=r(()=>({label:"label",value:"value",key:"value",...e.props})),m=r(()=>{const t=Array.isArray(e.options)?e.options:n.value||[],[a]=t;return typeof a=="string"||typeof a=="number"?t.map(s=>({[o.value.label]:s,[o.value.value]:s})):t}),i=async()=>{if(Array.isArray(e.options))return;const t=`${c}-${e.name}`;if(e.name){const a=f.get(t);if(a){n.value=a,u("init",a);return}}l.value=!0;try{n.value=await e.options(),e.name&&f.set(t,n.value,{expires:e.expires}),u("init",n.value)}finally{l.value=!1}};return p(()=>i()),{loading:l,myOptions:m,myProps:o,myValue:d,init:i}};export{b as a,g as p,A as u};
